RSYSLOGD(8)                                                                                           Linux System Administration                                                                                           RSYSLOGD(8)

NNAAMMEE
       rsyslogd - reliable and extended syslogd

SSYYNNOOPPSSIISS
       rrssyyssllooggdd [ --dd ] [ --DD ] [ --ff _c_o_n_f_i_g _f_i_l_e ] [ --ii _p_i_d _f_i_l_e ] [ --nn ] [ --NN _l_e_v_e_l ] [ --CC ] [ --vv ]

DDEESSCCRRIIPPTTIIOONN
       RRssyyssllooggdd is a system utility providing support for message logging.  Support of both internet and unix domain sockets enables this utility to support both local and remote logging.

       NNoottee  tthhaatt  tthhiiss  vveerrssiioonn  ooff rrssyysslloogg sshhiippss wwiitthh eexxtteennssiivvee ddooccuummeennttaattiioonn iinn hhttmmll ffoorrmmaatt..  This is provided in the ./doc subdirectory and probably in a separate package if you installed rsyslog via a packaging system.  To use
       rsyslog's advanced features, you nneeeedd to look at the html documentation, because the man pages only covers basic aspects of operation.  FFoorr ddeettaaiillss aanndd ccoonnffiigguurraattiioonn eexxaammpplleess,, sseeee tthhee rrssyysslloogg..ccoonnff ((55)) mmaann ppaaggee aanndd tthhee oonnlliinnee
       ddooccuummeennttaattiioonn aatt hhttttpp::////wwwwww..rrssyysslloogg..ccoomm//ddoocc

       RRssyyssllooggdd(8) is derived from the sysklogd package which in turn is derived from the stock BSD sources.

       RRssyyssllooggdd  provides  a kind of logging that many modern programs use.  Every logged message contains at least a time and a hostname field, normally a program name field, too, but that depends on how trusty the logging program
       is. The rsyslog package supports free definition of output formats via templates. It also supports precise timestamps and writing directly to databases. If the database option is used, tools like phpLogCon  can  be  used  to
       view the log data.

       While the rrssyyssllooggdd sources have been heavily modified a couple of notes are in order.  First of all there has been a systematic attempt to ensure that rsyslogd follows its default, standard BSD behavior. Of course, some con‐
       figuration file changes are necessary in order to support the template system. However, rsyslogd should be able to use a standard syslog.conf and act like the original syslogd. However, an original syslogd will not work cor‐
       rectly with a rsyslog-enhanced configuration file. At best, it will generate funny looking file names.  The second important concept to note is that this version of rsyslogd interacts transparently with the version of syslog
       found in the standard libraries.  If a binary linked to the standard shared libraries fails to function correctly we would like an example of the anomalous behavior.

       The main configuration file _/_e_t_c_/_r_s_y_s_l_o_g_._c_o_n_f or an alternative file, given with the --ff option, is read at startup.  Any lines that begin with the hash mark (``#'') and empty lines are ignored.  If  an  error  occurs  during
       parsing the error element is ignored. It is tried to parse the rest of the line.

OOPPTTIIOONNSS
       --DD     Runs the Bison config parser in debug mode. This may help when hard to find syntax errors are reported. Please note that the output generated is deeply technical and orignally targeted towards developers.

       --dd     Turns on debug mode. See the DEBUGGING section for more information.

       --ff _c_o_n_f_i_g _f_i_l_e
              Specify an alternative configuration file instead of _/_e_t_c_/_r_s_y_s_l_o_g_._c_o_n_f, which is the default.

       --ii _p_i_d _f_i_l_e
              Specify  an alternative pid file instead of the default one.  This option must be used if multiple instances of rsyslogd should run on a single machine. To disable writing a pid file, use the reserved name "NONE" (all
              upper case!), so "-iNONE".

       --nn     Avoid auto-backgrounding.  This is needed especially if the rrssyyssllooggdd is started and controlled by iinniitt(8).

       --NN  lleevveell
              Do a coNfig check. Do NOT run in regular mode, just check configuration file correctness.  This option is meant to verify a config file. To do so, run rsyslogd interactively in foreground, specifying -f  <config-file>
              and  -N  level.   The  level argument modifies behaviour. Currently, 0 is the same as not specifying the -N option at all (so this makes limited sense) and 1 actually activates the code. Later, higher levels will mean
              more verbosity (this is a forward-compatibility option).

       --CC     This prevents rsyslogd from changing to the root directory. This is almost never a good idea in production use. This option was introduced in support of the internal testbed.

       --vv     Print version and exit.

SSIIGGNNAALLSS
       RRssyyssllooggdd reacts to a set of signals.  You may easily send a signal to rrssyyssllooggdd using the following:

              kill -SIGNAL $(cat /var/run/rsyslogd.pid)

       Note that -SIGNAL must be replaced with the actual signal you are trying to send, e.g. with HUP. So it then becomes:

              kill -HUP $(cat /var/run/rsyslogd.pid)

       HHUUPP    This lets rrssyyssllooggdd perform close all open files.

       TTEERRMM ,,  IINNTT ,,  QQUUIITT
              RRssyyssllooggdd will die.

       UUSSRR11   Switch debugging on/off.  This option can only be used if rrssyyssllooggdd is started with the --dd debug option.

       CCHHLLDD   Wait for childs if some were born, because of wall'ing messages.

SSEECCUURRIITTYY TTHHRREEAATTSS
       There is the potential for the rsyslogd daemon to be used as a conduit for a denial of service attack.  A rogue program(mer) could very easily flood the rsyslogd daemon with syslog messages resulting in the log files consum‐
       ing all the remaining space on the filesystem.  Activating logging over the inet domain sockets will of course expose a system to risks outside of programs or individuals on the local machine.

       There are a number of methods of protecting a machine:

       1.     Implement kernel firewalling to limit which hosts or networks have access to the 514/UDP socket.

       2.     Logging can be directed to an isolated or non-root filesystem which, if filled, will not impair the machine.

       3.     The  ext2 filesystem can be used which can be configured to limit a certain percentage of a filesystem to usage by root only.  NNOOTTEE that this will require rsyslogd to be run as a non-root process.  AALLSSOO NNOOTTEE that this
              will prevent usage of remote logging on the default port since rsyslogd will be unable to bind to the 514/UDP socket.

       4.     Disabling inet domain sockets will limit risk to the local machine.

   MMeessssaaggee rreeppllaayy aanndd ssppooooffiinngg
       If remote logging is enabled, messages can easily be spoofed and replayed.  As the messages are transmitted in clear-text, an attacker might use the information obtained from  the  packets  for  malicious  things.  Also,  an
       attacker might replay recorded messages or spoof a sender's IP address, which could lead to a wrong perception of system activity. These can be prevented by using GSS-API authentication and encryption. Be sure to think about
       syslog network security before enabling it.

DDEEBBUUGGGGIINNGG
       When debugging is turned on using the --dd option, rrssyyssllooggdd produces debugging information according to the RRSSYYSSLLOOGG__DDEEBBUUGG environment variable and the signals received. When run in foreground, the  information  is  written  to
       stdout. An additional output file can be specified using the RRSSYYSSLLOOGG__DDEEBBUUGGLLOOGG environment variable.

FFIILLEESS
       _/_e_t_c_/_r_s_y_s_l_o_g_._c_o_n_f
              Configuration file for rrssyyssllooggdd.  See rrssyysslloogg..ccoonnff(5) for exact information.
       _/_d_e_v_/_l_o_g
              The Unix domain socket to from where local syslog messages are read.
       _/_v_a_r_/_r_u_n_/_r_s_y_s_l_o_g_d_._p_i_d
              The file containing the process id of rrssyyssllooggdd.
       _p_r_e_f_i_x_/_l_i_b_/_r_s_y_s_l_o_g
              Default directory for rrssyyssllooggdd modules. The _p_r_e_f_i_x is specified during compilation (e.g. /usr/local).
EENNVVIIRROONNMMEENNTT
       RRSSYYSSLLOOGG__DDEEBBUUGG
              Controls runtime debug support. It contains an option string with the following options possible (all are case insensitive):

              Debug  Turns on debugging and prevents forking. This is processed earlier in the startup than command line options (i.e. -d) and as such enables earlier debugging output. Mutually exclusive with DebugOnDemand.
              DebugOnDemand
                     Enables debugging but turns off debug output. The output can be toggled by sending SIGUSR1. Mutually exclusive with Debug.
              LogFuncFlow
                     Print out the logical flow of functions (entering and exiting them)
              FileTrace
                     Specifies  which  files  to trace LogFuncFlow. If not set (the default), a LogFuncFlow trace is provided for all files. Set to limit it to the files specified.FileTrace may be specified multiple times, one file
                     each (e.g. export RSYSLOG_DEBUG="LogFuncFlow FileTrace=vm.c FileTrace=expr.c"
              PrintFuncDB
                     Print the content of the debug function database whenever debug information is printed (e.g. abort case)!
              PrintAllDebugInfoOnExit
                     Print all debug information immediately before rsyslogd exits (currently not implemented!)
              PrintMutexAction
                     Print mutex action as it happens. Useful for finding deadlocks and such.
              NoLogTimeStamp
                     Do not prefix log lines with a timestamp (default is to do that).
              NoStdOut
                     Do not emit debug messages to stdout. If RSYSLOG_DEBUGLOG is not set, this means no messages will be displayed at all.
              Help   Display a very short list of commands - hopefully a life saver if you can't access the documentation...

       RRSSYYSSLLOOGG__DDEEBBUUGGLLOOGG
              If set, writes (almost) all debug message to the specified log file in addition to stdout.
       RRSSYYSSLLOOGG__MMOODDDDIIRR
              Provides the default directory in which loadable modules reside.

BBUUGGSS
       Please review the file BUGS for up-to-date information on known bugs and annoyances.

FFuurrtthheerr IInnffoorrmmaattiioonn
       Please visit hhttttpp::////wwwwww..rrssyysslloogg..ccoomm//ddoocc for additional information, tutorials and a support forum.

SSEEEE AALLSSOO
       rrssyysslloogg..ccoonnff(5), llooggggeerr(1), ssyysslloogg(2), ssyysslloogg(3), sseerrvviicceess(5), ssaavveelloogg(8)

CCOOLLLLAABBOORRAATTOORRSS
       rrssyyssllooggdd is derived from sysklogd sources, which in turn was taken from the BSD sources. Special thanks to Greg Wettstein (greg@wind.enjellic.com) and Martin Schulze (joey@linux.de) for the fine sysklogd package.

       Rainer Gerhards
       Adiscon GmbH
       Grossrinderfeld, Germany
       rgerhards@adiscon.com

Version 8.6.0                                                                                                 02 Dec 2014                                                                                                   RSYSLOGD(8)
